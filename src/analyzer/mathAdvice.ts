// src/analyzer/mathAdvice.ts
import chalk from "chalk";

/**
 * getMathAdvice(handText, meta)
 * - Tout en ORANGE
 * - Ton/format "cours de lyc√©e"
 * - Donne : rappel simple + calcul √©tape par √©tape + exemple d'erreur de maths (EV/range/fold equity)
 */
export function getMathAdvice(handText: string, meta: Record<string, any>): string {
  const orange = (s: string) => chalk.hex("#FFA500")(s); // tout en orange
  const title = chalk.bgHex("#FFA500").black.bold(" üßÆ CONSEIL MATH√âMATIQUE (mode scolaire) ");
  const sep = chalk.hex("#FFA500")("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

  const pot = Number(meta?.pot ?? 0);
  const toCall = Number(meta?.toCall ?? 0);
  const potOdds = Number(meta?.potOdds ?? 0); // ex: 0.25 = 25%

  if (!pot || !toCall) {
    return `\n${title}\n${sep}\n${orange(
      "Pas de calcul possible cette fois (montant du pot ou mise √† payer manquant)."
    )}\n${sep}\n`;
  }

  // 1) Rappel simple
  // Pot odds % = mise √† payer / (pot total apr√®s ton call)
  const totalIfCall = pot + toCall;
  const requiredEquity = (toCall / totalIfCall) * 100; // ce que tu dois gagner au minimum
  const shownOdds = potOdds ? (potOdds * 100) : requiredEquity;

  // 2) Exemple concret depuis la main
  // On affiche un "pas √† pas" tr√®s explicite.
  const stepByStep =
    `${orange("1) Pot actuel :")} ${orange(pot.toFixed(2))}\n` +
    `${orange("2) Mise √† payer (to call) :")} ${orange(toCall.toFixed(2))}\n` +
    `${orange("3) Pot total si tu payes :")} ${orange(`${pot.toFixed(2)} + ${toCall.toFixed(2)} = ${totalIfCall.toFixed(2)}`)}\n` +
    `${orange("4) Pot odds (‚âà % minimum de victoire requis) :")} ${orange(`${toCall.toFixed(2)} / ${totalIfCall.toFixed(2)} = ${requiredEquity.toFixed(1)}%`)}`;

  // 3) Erreur de maths illustr√©e (ex EV / Range / Fold equity)
  // On fabrique un exemple p√©dagogique ultra simple :
  //  - Si requiredEquity ‚âà 25%, on montre "rule of 2 et 4" avec 8 outs ‚Üí 32% au turn (‚âà call OK)
  //  - Sinon on prend un exemple d'overcard (‚âà 6 clean outs ~ 12% au turn, donc fold souvent).
  let errorBlock = "";
  if (requiredEquity >= 22 && requiredEquity <= 28) {
    errorBlock =
      `${orange("‚ùå Erreur fr√©quente (EV) :")} croire que payer est mauvais alors que tu as assez d‚Äôouts.\n` +
      `${orange("Exemple :")} tu penses avoir un tirage (‚âà 8 outs). ${orange("R√®gle du 2 et 4")} ‚Üí au turn ‚âà 8 √ó 2 = 16% ; √† la river ‚âà 8 √ó 4 = 32%.\n` +
      `${orange("Comparaison :")} il faut ‚âà ${requiredEquity.toFixed(1)}% (pot odds), ton tirage donne ‚âà 32% √† la river ‚Üí ${orange("CALL correct sur un seul barrel")}. (EV = esp√©rance de gain)\n`;
  } else {
    errorBlock =
      `${orange("‚ùå Erreur fr√©quente (Range/Fold equity) :")} payer hors position avec une simple overcard en pensant avoir ‚Äúbeaucoup d‚Äô√©quit√©‚Äù.\n` +
      `${orange("Exemple :")} avec ~6 outs cr√©dibles ‚Üí au turn ‚âà 6 √ó 2 = 12% seulement.\n` +
      `${orange("Comparaison :")} il faut ‚âà ${requiredEquity.toFixed(1)}%, tu n‚Äôas que ‚âà 12% ‚Üí ${orange("FOLD est souvent meilleur")}.\n` +
      `${orange("(Range = ensemble de mains probables chez vilain ; Fold equity = chances qu‚Äôil se couche si tu mises/relances)")}\n`;
  }

  // 4) Astuce ‚Äúde t√™te‚Äù
  const mental =
    `${orange("üí° Astuce de t√™te :")} retiens ${orange("R√®gle du 2 et 4")}. ` +
    `${orange("Turn")} : outs √ó 2 ‚âà % d‚Äôam√©lioration ; ${orange("Flop‚ÜíRiver")} : outs √ó 4 ‚âà %.\n` +
    `${orange("Ex : 9 outs")} ‚áí ‚âà 18% (turn) ou 36% (flop‚Üíriver). Compare ce % au ${orange("minimum requis")} (${requiredEquity.toFixed(1)}%).`;

  return `\n${title}\n${sep}\n${orange(
    "Objectif : comparer ce qu‚Äôil faut pour que le call soit rentable (EV ‚â• 0) au pourcentage de victoire r√©aliste."
  )}\n\n${stepByStep}\n\n${errorBlock}${mental}\n${sep}\n`;
}
